"updateCells": { # Updates all cells in a range with new data. # Updates many cells at once.
          "start": { # A coordinate in a sheet. # The coordinate to start writing data at.
              # Any number of rows and columns (including a different number of
              # columns per row) may be written.
              # All indexes are zero-based.
            "rowIndex": 42, # The row index of the coordinate.
            "columnIndex": 42, # The column index of the coordinate.
            "sheetId": 42, # The sheet this coordinate is on.
          },
          "range": { # A range on a sheet. # The range to write data to.
              #
              # If the data in rows does not cover the entire requested range,
              # the fields matching those set in fields will be cleared.
              # All indexes are zero-based.
              # Indexes are half open, e.g the start index is inclusive
              # and the end index is exclusive -- [start_index, end_index).
              # Missing indexes indicate the range is unbounded on that side.
              #
              # For example, if `"Sheet1"` is sheet ID 0, then:
              #
              #   `Sheet1!A1:A1 == sheet_id: 0,
              #                   start_row_index: 0, end_row_index: 1,
              #                   start_column_index: 0, end_column_index: 1`
              #
              #   `Sheet1!A3:B4 == sheet_id: 0,
              #                   start_row_index: 2, end_row_index: 4,
              #                   start_column_index: 0, end_column_index: 2`
              #
              #   `Sheet1!A:B == sheet_id: 0,
              #                 start_column_index: 0, end_column_index: 2`
              #
              #   `Sheet1!A5:B == sheet_id: 0,
              #                  start_row_index: 4,
              #                  start_column_index: 0, end_column_index: 2`
              #
              #   `Sheet1 == sheet_id:0`
              #
              # The start index must always be less than or equal to the end index.
              # If the start index equals the end index, then the range is empty.
              # Empty ranges are typically not meaningful and are usually rendered in the
              # UI as `#REF!`.
            "endRowIndex": 42, # The end row (exclusive) of the range, or not set if unbounded.
            "endColumnIndex": 42, # The end column (exclusive) of the range, or not set if unbounded.
            "sheetId": 42, # The sheet this range is on.
            "startColumnIndex": 42, # The start column (inclusive) of the range, or not set if unbounded.
            "startRowIndex": 42, # The start row (inclusive) of the range, or not set if unbounded.
          },
          "rows": [ # The data to write.
            { # Data about each cell in a row.
              "values": [ # The values in the row, one per column.
                { # Data about a specific cell.
                  "pivotTable": { # A pivot table. # A pivot table anchored at this cell. The size of pivot table itself
                      # is computed dynamically based on its data, grouping, filters, values,
                      # etc. Only the top-left cell of the pivot table contains the pivot table
                      # definition. The other cells will contain the calculated values of the
                      # results of the pivot in their effective_value fields.
                    "valueLayout": "A String", # Whether values should be listed horizontally (as columns)
                        # or vertically (as rows).
                    "rows": [ # Each row grouping in the pivot table.
                      { # A single grouping (either row or column) in a pivot table.
                        "showTotals": True or False, # True if the pivot table should include the totals for this grouping.
                        "repeatHeadings": True or False, # True if the headings in this pivot group should be repeated.
                            # This is only valid for row groupings and is ignored by columns.
                            #
                            # By default, we minimize repitition of headings by not showing higher
                            # level headings where they are the same. For example, even though the
                            # third row below corresponds to "Q1 Mar", "Q1" is not shown because
                            # it is redundant with previous rows. Setting repeat_headings to true
                            # would cause "Q1" to be repeated for "Feb" and "Mar".
                            #
                            #     +--------------+
                            #     | Q1     | Jan |
                            #     |        | Feb |
                            #     |        | Mar |
                            #     +--------+-----+
                            #     | Q1 Total     |
                            #     +--------------+
                        "label": "A String", # The labels to use for the row/column groups which can be customized. For
                            # example, in the following pivot table, the row label is `Region` (which
                            # could be renamed to `State`) and the column label is `Product` (which
                            # could be renamed `Item`). Pivot tables created before December 2017 do
                            # not have header labels. If you'd like to add header labels to an existing
                            # pivot table, please delete the existing pivot table and then create a new
                            # pivot table with same parameters.
                            #
                            #     +--------------+---------+-------+
                            #     | SUM of Units | Product |       |
                            #     | Region       | Pen     | Paper |
                            #     +--------------+---------+-------+
                            #     | New York     |     345 |    98 |
                            #     | Oregon       |     234 |   123 |
                            #     | Tennessee    |     531 |   415 |
                            #     +--------------+---------+-------+
                            #     | Grand Total  |    1110 |   636 |
                            #     +--------------+---------+-------+
                        "valueMetadata": [ # Metadata about values in the grouping.
                          { # Metadata about a value in a pivot grouping.
                            "collapsed": True or False, # True if the data corresponding to the value is collapsed.
                            "value": { # The kinds of value that a cell in a spreadsheet can have. # The calculated value the metadata corresponds to.
                                # (Note that formulaValue is not valid,
                                #  because the values will be calculated.)
                              "numberValue": 3.14, # Represents a double value.
                                  # Note: Dates, Times and DateTimes are represented as doubles in
                                  # "serial number" format.
                              "boolValue": True or False, # Represents a boolean value.
                              "formulaValue": "A String", # Represents a formula.
                              "stringValue": "A String", # Represents a string value.
                                  # Leading single quotes are not included. For example, if the user typed
                                  # `'123` into the UI, this would be represented as a `stringValue` of
                                  # `"123"`.
                              "errorValue": { # An error in a cell. # Represents an error.
                                  # This field is read-only.
                                "message": "A String", # A message with more information about the error
                                    # (in the spreadsheet's locale).
                                "type": "A String", # The type of error.
                              },
                            },
                          },
                        ],
                        "valueBucket": { # Information about which values in a pivot group should be used for sorting. # The bucket of the opposite pivot group to sort by.
                            # If not specified, sorting is alphabetical by this group's values.
                          "buckets": [ # Determines the bucket from which values are chosen to sort.
                              #
                              # For example, in a pivot table with one row group & two column groups,
                              # the row group can list up to two values. The first value corresponds
                              # to a value within the first column group, and the second value
                              # corresponds to a value in the second column group.  If no values
                              # are listed, this would indicate that the row should be sorted according
                              # to the "Grand Total" over the column groups. If a single value is listed,
                              # this would correspond to using the "Total" of that bucket.
                            { # The kinds of value that a cell in a spreadsheet can have.
                              "numberValue": 3.14, # Represents a double value.
                                  # Note: Dates, Times and DateTimes are represented as doubles in
                                  # "serial number" format.
                              "boolValue": True or False, # Represents a boolean value.
                              "formulaValue": "A String", # Represents a formula.
                              "stringValue": "A String", # Represents a string value.
                                  # Leading single quotes are not included. For example, if the user typed
                                  # `'123` into the UI, this would be represented as a `stringValue` of
                                  # `"123"`.
                              "errorValue": { # An error in a cell. # Represents an error.
                                  # This field is read-only.
                                "message": "A String", # A message with more information about the error
                                    # (in the spreadsheet's locale).
                                "type": "A String", # The type of error.
                              },
                            },
                          ],
                          "valuesIndex": 42, # The offset in the PivotTable.values list which the values in this
                              # grouping should be sorted by.
                        },
                        "sortOrder": "A String", # The order the values in this group should be sorted.
                        "sourceColumnOffset": 42, # The column offset of the source range that this grouping is based on.
                            #
                            # For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
                            # means this group refers to column `C`, whereas the offset `1` would refer
                            # to column `D`.
                        "groupRule": { # An optional setting on a PivotGroup that defines buckets for the values # The group rule to apply to this row/column group.
                            # in the source data column rather than breaking out each individual value.
                            # Only one PivotGroup with a group rule may be added for each column in
                            # the source data, though on any given column you may add both a
                            # PivotGroup that has a rule and a PivotGroup that does not.
                          "histogramRule": { # Allows you to organize the numeric values in a source data column into # A HistogramRule.
                              # buckets of a constant size. All values from HistogramRule.start to
                              # HistogramRule.end are placed into groups of size
                              # HistogramRule.interval. In addition, all values below
                              # HistogramRule.start are placed in one group, and all values above
                              # HistogramRule.end are placed in another. Only
                              # HistogramRule.interval is required, though if HistogramRule.start
                              # and HistogramRule.end are both provided, HistogramRule.start must
                              # be less than HistogramRule.end. For example, a pivot table showing
                              # average purchase amount by age that has 50+ rows:
                              #
                              #     +-----+-------------------+
                              #     | Age | AVERAGE of Amount |
                              #     +-----+-------------------+
                              #     | 16  |            $27.13 |
                              #     | 17  |             $5.24 |
                              #     | 18  |            $20.15 |
                              #     ...
                              #     +-----+-------------------+
                              # could be turned into a pivot table that looks like the one below by
                              # applying a histogram group rule with a HistogramRule.start of 25,
                              # an HistogramRule.interval of 20, and an HistogramRule.end
                              # of 65.
                              #
                              #     +-------------+-------------------+
                              #     | Grouped Age | AVERAGE of Amount |
                              #     +-------------+-------------------+
                              #     | < 25        |            $19.34 |
                              #     | 25-45       |            $31.43 |
                              #     | 45-65       |            $35.87 |
                              #     | > 65        |            $27.55 |
                              #     +-------------+-------------------+
                              #     | Grand Total |            $29.12 |
                              #     +-------------+-------------------+
                            "start": 3.14, # The minimum value at which items are placed into buckets
                                # of constant size. Values below start are lumped into a single bucket.
                                # This field is optional.
                            "interval": 3.14, # The size of the buckets that are created. Must be positive.
                            "end": 3.14, # The maximum value at which items are placed into buckets
                                # of constant size. Values above end are lumped into a single bucket.
                                # This field is optional.
                          },
                          "manualRule": { # Allows you to manually organize the values in a source data column into # A ManualRule.
                              # buckets with names of your choosing. For example, a pivot table that
                              # aggregates population by state:
                              #
                              #     +-------+-------------------+
                              #     | State | SUM of Population |
                              #     +-------+-------------------+
                              #     | AK    |               0.7 |
                              #     | AL    |               4.8 |
                              #     | AR    |               2.9 |
                              #     ...
                              #     +-------+-------------------+
                              # could be turned into a pivot table that aggregates population by time zone
                              # by providing a list of groups (for example, groupName = 'Central',
                              # items = ['AL', 'AR', 'IA', ...]) to a manual group rule.
                              # Note that a similar effect could be achieved by adding a time zone column
                              # to the source data and adjusting the pivot table.
                              #
                              #     +-----------+-------------------+
                              #     | Time Zone | SUM of Population |
                              #     +-----------+-------------------+
                              #     | Central   |             106.3 |
                              #     | Eastern   |             151.9 |
                              #     | Mountain  |              17.4 |
                              #     ...
                              #     +-----------+-------------------+
                            "groups": [ # The list of group names and the corresponding items from the source data
                                # that map to each group name.
                              { # A group name and a list of items from the source data that should be placed
                                  # in the group with this name.
                                "groupName": { # The kinds of value that a cell in a spreadsheet can have. # The group name, which must be a string. Each group in a given
                                    # ManualRule must have a unique group name.
                                  "numberValue": 3.14, # Represents a double value.
                                      # Note: Dates, Times and DateTimes are represented as doubles in
                                      # "serial number" format.
                                  "boolValue": True or False, # Represents a boolean value.
                                  "formulaValue": "A String", # Represents a formula.
                                  "stringValue": "A String", # Represents a string value.
                                      # Leading single quotes are not included. For example, if the user typed
                                      # `'123` into the UI, this would be represented as a `stringValue` of
                                      # `"123"`.
                                  "errorValue": { # An error in a cell. # Represents an error.
                                      # This field is read-only.
                                    "message": "A String", # A message with more information about the error
                                        # (in the spreadsheet's locale).
                                    "type": "A String", # The type of error.
                                  },
                                },
                                "items": [ # The items in the source data that should be placed into this group. Each
                                    # item may be a string, number, or boolean. Items may appear in at most one
                                    # group within a given ManualRule. Items that do not appear in any
                                    # group will appear on their own.
                                  { # The kinds of value that a cell in a spreadsheet can have.
                                    "numberValue": 3.14, # Represents a double value.
                                        # Note: Dates, Times and DateTimes are represented as doubles in
                                        # "serial number" format.
                                    "boolValue": True or False, # Represents a boolean value.
                                    "formulaValue": "A String", # Represents a formula.
                                    "stringValue": "A String", # Represents a string value.
                                        # Leading single quotes are not included. For example, if the user typed
                                        # `'123` into the UI, this would be represented as a `stringValue` of
                                        # `"123"`.
                                    "errorValue": { # An error in a cell. # Represents an error.
                                        # This field is read-only.
                                      "message": "A String", # A message with more information about the error
                                          # (in the spreadsheet's locale).
                                      "type": "A String", # The type of error.
                                    },
                                  },
                                ],
                              },
                            ],
                          },
                          "dateTimeRule": { # Allows you to organize the date-time values in a source data column into # A DateTimeRule.
                              # buckets based on selected parts of their date or time values. For example,
                              # consider a pivot table showing sales transactions by date:
                              #
                              #     +----------+--------------+
                              #     | Date     | SUM of Sales |
                              #     +----------+--------------+
                              #     | 1/1/2017 |      $621.14 |
                              #     | 2/3/2017 |      $708.84 |
                              #     | 5/8/2017 |      $326.84 |
                              #     ...
                              #     +----------+--------------+
                              # Applying a date-time group rule with a DateTimeRuleType of YEAR_MONTH
                              # results in the following pivot table.
                              #
                              #     +--------------+--------------+
                              #     | Grouped Date | SUM of Sales |
                              #     +--------------+--------------+
                              #     | 2017-Jan     |   $53,731.78 |
                              #     | 2017-Feb     |   $83,475.32 |
                              #     | 2017-Mar     |   $94,385.05 |
                              #     ...
                              #     +--------------+--------------+
                            "type": "A String", # The type of date-time grouping to apply.
                          },
                        },
                      },
                    ],
                    "source": { # A range on a sheet. # The range the pivot table is reading data from.
                        # All indexes are zero-based.
                        # Indexes are half open, e.g the start index is inclusive
                        # and the end index is exclusive -- [start_index, end_index).
                        # Missing indexes indicate the range is unbounded on that side.
                        #
                        # For example, if `"Sheet1"` is sheet ID 0, then:
                        #
                        #   `Sheet1!A1:A1 == sheet_id: 0,
                        #                   start_row_index: 0, end_row_index: 1,
                        #                   start_column_index: 0, end_column_index: 1`
                        #
                        #   `Sheet1!A3:B4 == sheet_id: 0,
                        #                   start_row_index: 2, end_row_index: 4,
                        #                   start_column_index: 0, end_column_index: 2`
                        #
                        #   `Sheet1!A:B == sheet_id: 0,
                        #                 start_column_index: 0, end_column_index: 2`
                        #
                        #   `Sheet1!A5:B == sheet_id: 0,
                        #                  start_row_index: 4,
                        #                  start_column_index: 0, end_column_index: 2`
                        #
                        #   `Sheet1 == sheet_id:0`
                        #
                        # The start index must always be less than or equal to the end index.
                        # If the start index equals the end index, then the range is empty.
                        # Empty ranges are typically not meaningful and are usually rendered in the
                        # UI as `#REF!`.
                      "endRowIndex": 42, # The end row (exclusive) of the range, or not set if unbounded.
                      "endColumnIndex": 42, # The end column (exclusive) of the range, or not set if unbounded.
                      "sheetId": 42, # The sheet this range is on.
                      "startColumnIndex": 42, # The start column (inclusive) of the range, or not set if unbounded.
                      "startRowIndex": 42, # The start row (inclusive) of the range, or not set if unbounded.
                    },
                    "values": [ # A list of values to include in the pivot table.
                      { # The definition of how a value in a pivot table should be calculated.
                        "formula": "A String", # A custom formula to calculate the value.  The formula must start
                            # with an `=` character.
                        "calculatedDisplayType": "A String", # If specified, indicates that pivot values should be displayed as
                            # the result of a calculation with another pivot value. For example, if
                            # calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the
                            # pivot values are displayed as the percentage of the grand total. In
                            # the Sheets UI, this is referred to as "Show As" in the value section of a
                            # pivot table.
                        "sourceColumnOffset": 42, # The column offset of the source range that this value reads from.
                            #
                            # For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
                            # means this value refers to column `C`, whereas the offset `1` would
                            # refer to column `D`.
                        "summarizeFunction": "A String", # A function to summarize the value.
                            # If formula is set, the only supported values are
                            # SUM and
                            # CUSTOM.
                            # If sourceColumnOffset is set, then `CUSTOM`
                            # is not supported.
                        "name": "A String", # A name to use for the value.
                      },
                    ],
                    "criteria": { # An optional mapping of filters per source column offset.
                        #
                        # The filters are applied before aggregating data into the pivot table.
                        # The map's key is the column offset of the source range that you want to
                        # filter, and the value is the criteria for that column.
                        #
                        # For example, if the source was `C10:E15`, a key of `0` will have the filter
                        # for column `C`, whereas the key `1` is for column `D`.
                      "a_key": { # Criteria for showing/hiding rows in a pivot table.
                        "visibleValues": [ # Values that should be included.  Values not listed here are excluded.
                          "A String",
                        ],
                      },
                    },
                    "columns": [ # Each column grouping in the pivot table.
                      { # A single grouping (either row or column) in a pivot table.
                        "showTotals": True or False, # True if the pivot table should include the totals for this grouping.
                        "repeatHeadings": True or False, # True if the headings in this pivot group should be repeated.
                            # This is only valid for row groupings and is ignored by columns.
                            #
                            # By default, we minimize repitition of headings by not showing higher
                            # level headings where they are the same. For example, even though the
                            # third row below corresponds to "Q1 Mar", "Q1" is not shown because
                            # it is redundant with previous rows. Setting repeat_headings to true
                            # would cause "Q1" to be repeated for "Feb" and "Mar".
                            #
                            #     +--------------+
                            #     | Q1     | Jan |
                            #     |        | Feb |
                            #     |        | Mar |
                            #     +--------+-----+
                            #     | Q1 Total     |
                            #     +--------------+
                        "label": "A String", # The labels to use for the row/column groups which can be customized. For
                            # example, in the following pivot table, the row label is `Region` (which
                            # could be renamed to `State`) and the column label is `Product` (which
                            # could be renamed `Item`). Pivot tables created before December 2017 do
                            # not have header labels. If you'd like to add header labels to an existing
                            # pivot table, please delete the existing pivot table and then create a new
                            # pivot table with same parameters.
                            #
                            #     +--------------+---------+-------+
                            #     | SUM of Units | Product |       |
                            #     | Region       | Pen     | Paper |
                            #     +--------------+---------+-------+
                            #     | New York     |     345 |    98 |
                            #     | Oregon       |     234 |   123 |
                            #     | Tennessee    |     531 |   415 |
                            #     +--------------+---------+-------+
                            #     | Grand Total  |    1110 |   636 |
                            #     +--------------+---------+-------+
                        "valueMetadata": [ # Metadata about values in the grouping.
                          { # Metadata about a value in a pivot grouping.
                            "collapsed": True or False, # True if the data corresponding to the value is collapsed.
                            "value": { # The kinds of value that a cell in a spreadsheet can have. # The calculated value the metadata corresponds to.
                                # (Note that formulaValue is not valid,
                                #  because the values will be calculated.)
                              "numberValue": 3.14, # Represents a double value.
                                  # Note: Dates, Times and DateTimes are represented as doubles in
                                  # "serial number" format.
                              "boolValue": True or False, # Represents a boolean value.
                              "formulaValue": "A String", # Represents a formula.
                              "stringValue": "A String", # Represents a string value.
                                  # Leading single quotes are not included. For example, if the user typed
                                  # `'123` into the UI, this would be represented as a `stringValue` of
                                  # `"123"`.
                              "errorValue": { # An error in a cell. # Represents an error.
                                  # This field is read-only.
                                "message": "A String", # A message with more information about the error
                                    # (in the spreadsheet's locale).
                                "type": "A String", # The type of error.
                              },
                            },
                          },
                        ],
                        "valueBucket": { # Information about which values in a pivot group should be used for sorting. # The bucket of the opposite pivot group to sort by.
                            # If not specified, sorting is alphabetical by this group's values.
                          "buckets": [ # Determines the bucket from which values are chosen to sort.
                              #
                              # For example, in a pivot table with one row group & two column groups,
                              # the row group can list up to two values. The first value corresponds
                              # to a value within the first column group, and the second value
                              # corresponds to a value in the second column group.  If no values
                              # are listed, this would indicate that the row should be sorted according
                              # to the "Grand Total" over the column groups. If a single value is listed,
                              # this would correspond to using the "Total" of that bucket.
                            { # The kinds of value that a cell in a spreadsheet can have.
                              "numberValue": 3.14, # Represents a double value.
                                  # Note: Dates, Times and DateTimes are represented as doubles in
                                  # "serial number" format.
                              "boolValue": True or False, # Represents a boolean value.
                              "formulaValue": "A String", # Represents a formula.
                              "stringValue": "A String", # Represents a string value.
                                  # Leading single quotes are not included. For example, if the user typed
                                  # `'123` into the UI, this would be represented as a `stringValue` of
                                  # `"123"`.
                              "errorValue": { # An error in a cell. # Represents an error.
                                  # This field is read-only.
                                "message": "A String", # A message with more information about the error
                                    # (in the spreadsheet's locale).
                                "type": "A String", # The type of error.
                              },
                            },
                          ],
                          "valuesIndex": 42, # The offset in the PivotTable.values list which the values in this
                              # grouping should be sorted by.
                        },
                        "sortOrder": "A String", # The order the values in this group should be sorted.
                        "sourceColumnOffset": 42, # The column offset of the source range that this grouping is based on.
                            #
                            # For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
                            # means this group refers to column `C`, whereas the offset `1` would refer
                            # to column `D`.
                        "groupRule": { # An optional setting on a PivotGroup that defines buckets for the values # The group rule to apply to this row/column group.
                            # in the source data column rather than breaking out each individual value.
                            # Only one PivotGroup with a group rule may be added for each column in
                            # the source data, though on any given column you may add both a
                            # PivotGroup that has a rule and a PivotGroup that does not.
                          "histogramRule": { # Allows you to organize the numeric values in a source data column into # A HistogramRule.
                              # buckets of a constant size. All values from HistogramRule.start to
                              # HistogramRule.end are placed into groups of size
                              # HistogramRule.interval. In addition, all values below
                              # HistogramRule.start are placed in one group, and all values above
                              # HistogramRule.end are placed in another. Only
                              # HistogramRule.interval is required, though if HistogramRule.start
                              # and HistogramRule.end are both provided, HistogramRule.start must
                              # be less than HistogramRule.end. For example, a pivot table showing
                              # average purchase amount by age that has 50+ rows:
                              #
                              #     +-----+-------------------+
                              #     | Age | AVERAGE of Amount |
                              #     +-----+-------------------+
                              #     | 16  |            $27.13 |
                              #     | 17  |             $5.24 |
                              #     | 18  |            $20.15 |
                              #     ...
                              #     +-----+-------------------+
                              # could be turned into a pivot table that looks like the one below by
                              # applying a histogram group rule with a HistogramRule.start of 25,
                              # an HistogramRule.interval of 20, and an HistogramRule.end
                              # of 65.
                              #
                              #     +-------------+-------------------+
                              #     | Grouped Age | AVERAGE of Amount |
                              #     +-------------+-------------------+
                              #     | < 25        |            $19.34 |
                              #     | 25-45       |            $31.43 |
                              #     | 45-65       |            $35.87 |
                              #     | > 65        |            $27.55 |
                              #     +-------------+-------------------+
                              #     | Grand Total |            $29.12 |
                              #     +-------------+-------------------+
                            "start": 3.14, # The minimum value at which items are placed into buckets
                                # of constant size. Values below start are lumped into a single bucket.
                                # This field is optional.
                            "interval": 3.14, # The size of the buckets that are created. Must be positive.
                            "end": 3.14, # The maximum value at which items are placed into buckets
                                # of constant size. Values above end are lumped into a single bucket.
                                # This field is optional.
                          },
                          "manualRule": { # Allows you to manually organize the values in a source data column into # A ManualRule.
                              # buckets with names of your choosing. For example, a pivot table that
                              # aggregates population by state:
                              #
                              #     +-------+-------------------+
                              #     | State | SUM of Population |
                              #     +-------+-------------------+
                              #     | AK    |               0.7 |
                              #     | AL    |               4.8 |
                              #     | AR    |               2.9 |
                              #     ...
                              #     +-------+-------------------+
                              # could be turned into a pivot table that aggregates population by time zone
                              # by providing a list of groups (for example, groupName = 'Central',
                              # items = ['AL', 'AR', 'IA', ...]) to a manual group rule.
                              # Note that a similar effect could be achieved by adding a time zone column
                              # to the source data and adjusting the pivot table.
                              #
                              #     +-----------+-------------------+
                              #     | Time Zone | SUM of Population |
                              #     +-----------+-------------------+
                              #     | Central   |             106.3 |
                              #     | Eastern   |             151.9 |
                              #     | Mountain  |              17.4 |
                              #     ...
                              #     +-----------+-------------------+
                            "groups": [ # The list of group names and the corresponding items from the source data
                                # that map to each group name.
                              { # A group name and a list of items from the source data that should be placed
                                  # in the group with this name.
                                "groupName": { # The kinds of value that a cell in a spreadsheet can have. # The group name, which must be a string. Each group in a given
                                    # ManualRule must have a unique group name.
                                  "numberValue": 3.14, # Represents a double value.
                                      # Note: Dates, Times and DateTimes are represented as doubles in
                                      # "serial number" format.
                                  "boolValue": True or False, # Represents a boolean value.
                                  "formulaValue": "A String", # Represents a formula.
                                  "stringValue": "A String", # Represents a string value.
                                      # Leading single quotes are not included. For example, if the user typed
                                      # `'123` into the UI, this would be represented as a `stringValue` of
                                      # `"123"`.
                                  "errorValue": { # An error in a cell. # Represents an error.
                                      # This field is read-only.
                                    "message": "A String", # A message with more information about the error
                                        # (in the spreadsheet's locale).
                                    "type": "A String", # The type of error.
                                  },
                                },
                                "items": [ # The items in the source data that should be placed into this group. Each
                                    # item may be a string, number, or boolean. Items may appear in at most one
                                    # group within a given ManualRule. Items that do not appear in any
                                    # group will appear on their own.
                                  { # The kinds of value that a cell in a spreadsheet can have.
                                    "numberValue": 3.14, # Represents a double value.
                                        # Note: Dates, Times and DateTimes are represented as doubles in
                                        # "serial number" format.
                                    "boolValue": True or False, # Represents a boolean value.
                                    "formulaValue": "A String", # Represents a formula.
                                    "stringValue": "A String", # Represents a string value.
                                        # Leading single quotes are not included. For example, if the user typed
                                        # `'123` into the UI, this would be represented as a `stringValue` of
                                        # `"123"`.
                                    "errorValue": { # An error in a cell. # Represents an error.
                                        # This field is read-only.
                                      "message": "A String", # A message with more information about the error
                                          # (in the spreadsheet's locale).
                                      "type": "A String", # The type of error.
                                    },
                                  },
                                ],
                              },
                            ],
                          },
                          "dateTimeRule": { # Allows you to organize the date-time values in a source data column into # A DateTimeRule.
                              # buckets based on selected parts of their date or time values. For example,
                              # consider a pivot table showing sales transactions by date:
                              #
                              #     +----------+--------------+
                              #     | Date     | SUM of Sales |
                              #     +----------+--------------+
                              #     | 1/1/2017 |      $621.14 |
                              #     | 2/3/2017 |      $708.84 |
                              #     | 5/8/2017 |      $326.84 |
                              #     ...
                              #     +----------+--------------+
                              # Applying a date-time group rule with a DateTimeRuleType of YEAR_MONTH
                              # results in the following pivot table.
                              #
                              #     +--------------+--------------+
                              #     | Grouped Date | SUM of Sales |
                              #     +--------------+--------------+
                              #     | 2017-Jan     |   $53,731.78 |
                              #     | 2017-Feb     |   $83,475.32 |
                              #     | 2017-Mar     |   $94,385.05 |
                              #     ...
                              #     +--------------+--------------+
                            "type": "A String", # The type of date-time grouping to apply.
                          },
                        },
                      },
                    ],
                  },
                  "hyperlink": "A String", # A hyperlink this cell points to, if any.
                      # This field is read-only.  (To set it, use a `=HYPERLINK` formula
                      # in the userEnteredValue.formulaValue
                      # field.)
                  "effectiveValue": { # The kinds of value that a cell in a spreadsheet can have. # The effective value of the cell. For cells with formulas, this is
                      # the calculated value.  For cells with literals, this is
                      # the same as the user_entered_value.
                      # This field is read-only.
                    "numberValue": 3.14, # Represents a double value.
                        # Note: Dates, Times and DateTimes are represented as doubles in
                        # "serial number" format.
                    "boolValue": True or False, # Represents a boolean value.
                    "formulaValue": "A String", # Represents a formula.
                    "stringValue": "A String", # Represents a string value.
                        # Leading single quotes are not included. For example, if the user typed
                        # `'123` into the UI, this would be represented as a `stringValue` of
                        # `"123"`.
                    "errorValue": { # An error in a cell. # Represents an error.
                        # This field is read-only.
                      "message": "A String", # A message with more information about the error
                          # (in the spreadsheet's locale).
                      "type": "A String", # The type of error.
                    },
                  },
                  "formattedValue": "A String", # The formatted value of the cell.
                      # This is the value as it's shown to the user.
                      # This field is read-only.
                  "userEnteredValue": { # The kinds of value that a cell in a spreadsheet can have. # The value the user entered in the cell. e.g, `1234`, `'Hello'`, or `=NOW()`
                      # Note: Dates, Times and DateTimes are represented as doubles in
                      # serial number format.
                    "numberValue": 3.14, # Represents a double value.
                        # Note: Dates, Times and DateTimes are represented as doubles in
                        # "serial number" format.
                    "boolValue": True or False, # Represents a boolean value.
                    "formulaValue": "A String", # Represents a formula.
                    "stringValue": "A String", # Represents a string value.
                        # Leading single quotes are not included. For example, if the user typed
                        # `'123` into the UI, this would be represented as a `stringValue` of
                        # `"123"`.
                    "errorValue": { # An error in a cell. # Represents an error.
                        # This field is read-only.
                      "message": "A String", # A message with more information about the error
                          # (in the spreadsheet's locale).
                      "type": "A String", # The type of error.
                    },
                  },
                  "note": "A String", # Any note on the cell.
                  "effectiveFormat": { # The format of a cell. # The effective format being used by the cell.
                      # This includes the results of applying any conditional formatting and,
                      # if the cell contains a formula, the computed number format.
                      # If the effective format is the default format, effective format will
                      # not be written.
                      # This field is read-only.
                    "numberFormat": { # The number format of a cell. # A format describing how number values should be represented to the user.
                      "pattern": "A String", # Pattern string used for formatting.  If not set, a default pattern based on
                          # the user's locale will be used if necessary for the given type.
                          # See the [Date and Number Formats guide](/sheets/api/guides/formats) for more
                          # information about the supported patterns.
                      "type": "A String", # The type of the number format.
                          # When writing, this field must be set.
                    },
                    "textDirection": "A String", # The direction of the text in the cell.
                    "padding": { # The amount of padding around the cell, in pixels. # The padding of the cell.
                        # When updating padding, every field must be specified.
                      "top": 42, # The top padding of the cell.
                      "right": 42, # The right padding of the cell.
                      "left": 42, # The left padding of the cell.
                      "bottom": 42, # The bottom padding of the cell.
                    },
                    "horizontalAlignment": "A String", # The horizontal alignment of the value in the cell.
                    "backgroundColor": { # Represents a color in the RGBA color space. This representation is designed # The background color of the cell.
                        # for simplicity of conversion to/from color representations in various
                        # languages over compactness; for example, the fields of this representation
                        # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                        # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                        # method in iOS; and, with just a little work, it can be easily formatted into
                        # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                        #
                        # Example (Java):
                        #
                        #      import com.google.type.Color;
                        #
                        #      // ...
                        #      public static java.awt.Color fromProto(Color protocolor) {
                        #        float alpha = protocolor.hasAlpha()
                        #            ? protocolor.getAlpha().getValue()
                        #            : 1.0;
                        #
                        #        return new java.awt.Color(
                        #            protocolor.getRed(),
                        #            protocolor.getGreen(),
                        #            protocolor.getBlue(),
                        #            alpha);
                        #      }
                        #
                        #      public static Color toProto(java.awt.Color color) {
                        #        float red = (float) color.getRed();
                        #        float green = (float) color.getGreen();
                        #        float blue = (float) color.getBlue();
                        #        float denominator = 255.0;
                        #        Color.Builder resultBuilder =
                        #            Color
                        #                .newBuilder()
                        #                .setRed(red / denominator)
                        #                .setGreen(green / denominator)
                        #                .setBlue(blue / denominator);
                        #        int alpha = color.getAlpha();
                        #        if (alpha != 255) {
                        #          result.setAlpha(
                        #              FloatValue
                        #                  .newBuilder()
                        #                  .setValue(((float) alpha) / denominator)
                        #                  .build());
                        #        }
                        #        return resultBuilder.build();
                        #      }
                        #      // ...
                        #
                        # Example (iOS / Obj-C):
                        #
                        #      // ...
                        #      static UIColor* fromProto(Color* protocolor) {
                        #         float red = [protocolor red];
                        #         float green = [protocolor green];
                        #         float blue = [protocolor blue];
                        #         FloatValue* alpha_wrapper = [protocolor alpha];
                        #         float alpha = 1.0;
                        #         if (alpha_wrapper != nil) {
                        #           alpha = [alpha_wrapper value];
                        #         }
                        #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                        #      }
                        #
                        #      static Color* toProto(UIColor* color) {
                        #          CGFloat red, green, blue, alpha;
                        #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                        #            return nil;
                        #          }
                        #          Color* result = [[Color alloc] init];
                        #          [result setRed:red];
                        #          [result setGreen:green];
                        #          [result setBlue:blue];
                        #          if (alpha <= 0.9999) {
                        #            [result setAlpha:floatWrapperWithValue(alpha)];
                        #          }
                        #          [result autorelease];
                        #          return result;
                        #     }
                        #     // ...
                        #
                        #  Example (JavaScript):
                        #
                        #     // ...
                        #
                        #     var protoToCssColor = function(rgb_color) {
                        #        var redFrac = rgb_color.red || 0.0;
                        #        var greenFrac = rgb_color.green || 0.0;
                        #        var blueFrac = rgb_color.blue || 0.0;
                        #        var red = Math.floor(redFrac * 255);
                        #        var green = Math.floor(greenFrac * 255);
                        #        var blue = Math.floor(blueFrac * 255);
                        #
                        #        if (!('alpha' in rgb_color)) {
                        #           return rgbToCssColor_(red, green, blue);
                        #        }
                        #
                        #        var alphaFrac = rgb_color.alpha.value || 0.0;
                        #        var rgbParams = [red, green, blue].join(',');
                        #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                        #     };
                        #
                        #     var rgbToCssColor_ = function(red, green, blue) {
                        #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                        #       var hexString = rgbNumber.toString(16);
                        #       var missingZeros = 6 - hexString.length;
                        #       var resultBuilder = ['#'];
                        #       for (var i = 0; i < missingZeros; i++) {
                        #          resultBuilder.push('0');
                        #       }
                        #       resultBuilder.push(hexString);
                        #       return resultBuilder.join('');
                        #     };
                        #
                        #     // ...
                      "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                      "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                          # the final pixel color is defined by the equation:
                          #
                          #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                          #
                          # This means that a value of 1.0 corresponds to a solid color, whereas
                          # a value of 0.0 corresponds to a completely transparent color. This
                          # uses a wrapper message rather than a simple float scalar so that it is
                          # possible to distinguish between a default value and the value being unset.
                          # If omitted, this color object is to be rendered as a solid color
                          # (as if the alpha value had been explicitly given with a value of 1.0).
                      "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                      "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                    },
                    "verticalAlignment": "A String", # The vertical alignment of the value in the cell.
                    "textFormat": { # The format of a run of text in a cell. # The format of the text in the cell (unless overridden by a format run).
                        # Absent values indicate that the field isn't specified.
                      "foregroundColor": { # Represents a color in the RGBA color space. This representation is designed # The foreground color of the text.
                          # for simplicity of conversion to/from color representations in various
                          # languages over compactness; for example, the fields of this representation
                          # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                          # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                          # method in iOS; and, with just a little work, it can be easily formatted into
                          # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                          #
                          # Example (Java):
                          #
                          #      import com.google.type.Color;
                          #
                          #      // ...
                          #      public static java.awt.Color fromProto(Color protocolor) {
                          #        float alpha = protocolor.hasAlpha()
                          #            ? protocolor.getAlpha().getValue()
                          #            : 1.0;
                          #
                          #        return new java.awt.Color(
                          #            protocolor.getRed(),
                          #            protocolor.getGreen(),
                          #            protocolor.getBlue(),
                          #            alpha);
                          #      }
                          #
                          #      public static Color toProto(java.awt.Color color) {
                          #        float red = (float) color.getRed();
                          #        float green = (float) color.getGreen();
                          #        float blue = (float) color.getBlue();
                          #        float denominator = 255.0;
                          #        Color.Builder resultBuilder =
                          #            Color
                          #                .newBuilder()
                          #                .setRed(red / denominator)
                          #                .setGreen(green / denominator)
                          #                .setBlue(blue / denominator);
                          #        int alpha = color.getAlpha();
                          #        if (alpha != 255) {
                          #          result.setAlpha(
                          #              FloatValue
                          #                  .newBuilder()
                          #                  .setValue(((float) alpha) / denominator)
                          #                  .build());
                          #        }
                          #        return resultBuilder.build();
                          #      }
                          #      // ...
                          #
                          # Example (iOS / Obj-C):
                          #
                          #      // ...
                          #      static UIColor* fromProto(Color* protocolor) {
                          #         float red = [protocolor red];
                          #         float green = [protocolor green];
                          #         float blue = [protocolor blue];
                          #         FloatValue* alpha_wrapper = [protocolor alpha];
                          #         float alpha = 1.0;
                          #         if (alpha_wrapper != nil) {
                          #           alpha = [alpha_wrapper value];
                          #         }
                          #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                          #      }
                          #
                          #      static Color* toProto(UIColor* color) {
                          #          CGFloat red, green, blue, alpha;
                          #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                          #            return nil;
                          #          }
                          #          Color* result = [[Color alloc] init];
                          #          [result setRed:red];
                          #          [result setGreen:green];
                          #          [result setBlue:blue];
                          #          if (alpha <= 0.9999) {
                          #            [result setAlpha:floatWrapperWithValue(alpha)];
                          #          }
                          #          [result autorelease];
                          #          return result;
                          #     }
                          #     // ...
                          #
                          #  Example (JavaScript):
                          #
                          #     // ...
                          #
                          #     var protoToCssColor = function(rgb_color) {
                          #        var redFrac = rgb_color.red || 0.0;
                          #        var greenFrac = rgb_color.green || 0.0;
                          #        var blueFrac = rgb_color.blue || 0.0;
                          #        var red = Math.floor(redFrac * 255);
                          #        var green = Math.floor(greenFrac * 255);
                          #        var blue = Math.floor(blueFrac * 255);
                          #
                          #        if (!('alpha' in rgb_color)) {
                          #           return rgbToCssColor_(red, green, blue);
                          #        }
                          #
                          #        var alphaFrac = rgb_color.alpha.value || 0.0;
                          #        var rgbParams = [red, green, blue].join(',');
                          #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                          #     };
                          #
                          #     var rgbToCssColor_ = function(red, green, blue) {
                          #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                          #       var hexString = rgbNumber.toString(16);
                          #       var missingZeros = 6 - hexString.length;
                          #       var resultBuilder = ['#'];
                          #       for (var i = 0; i < missingZeros; i++) {
                          #          resultBuilder.push('0');
                          #       }
                          #       resultBuilder.push(hexString);
                          #       return resultBuilder.join('');
                          #     };
                          #
                          #     // ...
                        "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                        "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                            # the final pixel color is defined by the equation:
                            #
                            #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                            #
                            # This means that a value of 1.0 corresponds to a solid color, whereas
                            # a value of 0.0 corresponds to a completely transparent color. This
                            # uses a wrapper message rather than a simple float scalar so that it is
                            # possible to distinguish between a default value and the value being unset.
                            # If omitted, this color object is to be rendered as a solid color
                            # (as if the alpha value had been explicitly given with a value of 1.0).
                        "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                        "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                      },
                      "bold": True or False, # True if the text is bold.
                      "strikethrough": True or False, # True if the text has a strikethrough.
                      "fontFamily": "A String", # The font family.
                      "fontSize": 42, # The size of the font.
                      "italic": True or False, # True if the text is italicized.
                      "underline": True or False, # True if the text is underlined.
                    },
                    "wrapStrategy": "A String", # The wrap strategy for the value in the cell.
                    "hyperlinkDisplayType": "A String", # How a hyperlink, if it exists, should be displayed in the cell.
                    "borders": { # The borders of the cell. # The borders of the cell.
                      "top": { # A border along a cell. # The top border of the cell.
                        "color": { # Represents a color in the RGBA color space. This representation is designed # The color of the border.
                            # for simplicity of conversion to/from color representations in various
                            # languages over compactness; for example, the fields of this representation
                            # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                            # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                            # method in iOS; and, with just a little work, it can be easily formatted into
                            # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                            #
                            # Example (Java):
                            #
                            #      import com.google.type.Color;
                            #
                            #      // ...
                            #      public static java.awt.Color fromProto(Color protocolor) {
                            #        float alpha = protocolor.hasAlpha()
                            #            ? protocolor.getAlpha().getValue()
                            #            : 1.0;
                            #
                            #        return new java.awt.Color(
                            #            protocolor.getRed(),
                            #            protocolor.getGreen(),
                            #            protocolor.getBlue(),
                            #            alpha);
                            #      }
                            #
                            #      public static Color toProto(java.awt.Color color) {
                            #        float red = (float) color.getRed();
                            #        float green = (float) color.getGreen();
                            #        float blue = (float) color.getBlue();
                            #        float denominator = 255.0;
                            #        Color.Builder resultBuilder =
                            #            Color
                            #                .newBuilder()
                            #                .setRed(red / denominator)
                            #                .setGreen(green / denominator)
                            #                .setBlue(blue / denominator);
                            #        int alpha = color.getAlpha();
                            #        if (alpha != 255) {
                            #          result.setAlpha(
                            #              FloatValue
                            #                  .newBuilder()
                            #                  .setValue(((float) alpha) / denominator)
                            #                  .build());
                            #        }
                            #        return resultBuilder.build();
                            #      }
                            #      // ...
                            #
                            # Example (iOS / Obj-C):
                            #
                            #      // ...
                            #      static UIColor* fromProto(Color* protocolor) {
                            #         float red = [protocolor red];
                            #         float green = [protocolor green];
                            #         float blue = [protocolor blue];
                            #         FloatValue* alpha_wrapper = [protocolor alpha];
                            #         float alpha = 1.0;
                            #         if (alpha_wrapper != nil) {
                            #           alpha = [alpha_wrapper value];
                            #         }
                            #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                            #      }
                            #
                            #      static Color* toProto(UIColor* color) {
                            #          CGFloat red, green, blue, alpha;
                            #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                            #            return nil;
                            #          }
                            #          Color* result = [[Color alloc] init];
                            #          [result setRed:red];
                            #          [result setGreen:green];
                            #          [result setBlue:blue];
                            #          if (alpha <= 0.9999) {
                            #            [result setAlpha:floatWrapperWithValue(alpha)];
                            #          }
                            #          [result autorelease];
                            #          return result;
                            #     }
                            #     // ...
                            #
                            #  Example (JavaScript):
                            #
                            #     // ...
                            #
                            #     var protoToCssColor = function(rgb_color) {
                            #        var redFrac = rgb_color.red || 0.0;
                            #        var greenFrac = rgb_color.green || 0.0;
                            #        var blueFrac = rgb_color.blue || 0.0;
                            #        var red = Math.floor(redFrac * 255);
                            #        var green = Math.floor(greenFrac * 255);
                            #        var blue = Math.floor(blueFrac * 255);
                            #
                            #        if (!('alpha' in rgb_color)) {
                            #           return rgbToCssColor_(red, green, blue);
                            #        }
                            #
                            #        var alphaFrac = rgb_color.alpha.value || 0.0;
                            #        var rgbParams = [red, green, blue].join(',');
                            #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                            #     };
                            #
                            #     var rgbToCssColor_ = function(red, green, blue) {
                            #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                            #       var hexString = rgbNumber.toString(16);
                            #       var missingZeros = 6 - hexString.length;
                            #       var resultBuilder = ['#'];
                            #       for (var i = 0; i < missingZeros; i++) {
                            #          resultBuilder.push('0');
                            #       }
                            #       resultBuilder.push(hexString);
                            #       return resultBuilder.join('');
                            #     };
                            #
                            #     // ...
                          "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                          "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                              # the final pixel color is defined by the equation:
                              #
                              #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                              #
                              # This means that a value of 1.0 corresponds to a solid color, whereas
                              # a value of 0.0 corresponds to a completely transparent color. This
                              # uses a wrapper message rather than a simple float scalar so that it is
                              # possible to distinguish between a default value and the value being unset.
                              # If omitted, this color object is to be rendered as a solid color
                              # (as if the alpha value had been explicitly given with a value of 1.0).
                          "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                          "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                        },
                        "width": 42, # The width of the border, in pixels.
                            # Deprecated; the width is determined by the "style" field.
                        "style": "A String", # The style of the border.
                      },
                      "right": { # A border along a cell. # The right border of the cell.
                        "color": { # Represents a color in the RGBA color space. This representation is designed # The color of the border.
                            # for simplicity of conversion to/from color representations in various
                            # languages over compactness; for example, the fields of this representation
                            # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                            # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                            # method in iOS; and, with just a little work, it can be easily formatted into
                            # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                            #
                            # Example (Java):
                            #
                            #      import com.google.type.Color;
                            #
                            #      // ...
                            #      public static java.awt.Color fromProto(Color protocolor) {
                            #        float alpha = protocolor.hasAlpha()
                            #            ? protocolor.getAlpha().getValue()
                            #            : 1.0;
                            #
                            #        return new java.awt.Color(
                            #            protocolor.getRed(),
                            #            protocolor.getGreen(),
                            #            protocolor.getBlue(),
                            #            alpha);
                            #      }
                            #
                            #      public static Color toProto(java.awt.Color color) {
                            #        float red = (float) color.getRed();
                            #        float green = (float) color.getGreen();
                            #        float blue = (float) color.getBlue();
                            #        float denominator = 255.0;
                            #        Color.Builder resultBuilder =
                            #            Color
                            #                .newBuilder()
                            #                .setRed(red / denominator)
                            #                .setGreen(green / denominator)
                            #                .setBlue(blue / denominator);
                            #        int alpha = color.getAlpha();
                            #        if (alpha != 255) {
                            #          result.setAlpha(
                            #              FloatValue
                            #                  .newBuilder()
                            #                  .setValue(((float) alpha) / denominator)
                            #                  .build());
                            #        }
                            #        return resultBuilder.build();
                            #      }
                            #      // ...
                            #
                            # Example (iOS / Obj-C):
                            #
                            #      // ...
                            #      static UIColor* fromProto(Color* protocolor) {
                            #         float red = [protocolor red];
                            #         float green = [protocolor green];
                            #         float blue = [protocolor blue];
                            #         FloatValue* alpha_wrapper = [protocolor alpha];
                            #         float alpha = 1.0;
                            #         if (alpha_wrapper != nil) {
                            #           alpha = [alpha_wrapper value];
                            #         }
                            #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                            #      }
                            #
                            #      static Color* toProto(UIColor* color) {
                            #          CGFloat red, green, blue, alpha;
                            #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                            #            return nil;
                            #          }
                            #          Color* result = [[Color alloc] init];
                            #          [result setRed:red];
                            #          [result setGreen:green];
                            #          [result setBlue:blue];
                            #          if (alpha <= 0.9999) {
                            #            [result setAlpha:floatWrapperWithValue(alpha)];
                            #          }
                            #          [result autorelease];
                            #          return result;
                            #     }
                            #     // ...
                            #
                            #  Example (JavaScript):
                            #
                            #     // ...
                            #
                            #     var protoToCssColor = function(rgb_color) {
                            #        var redFrac = rgb_color.red || 0.0;
                            #        var greenFrac = rgb_color.green || 0.0;
                            #        var blueFrac = rgb_color.blue || 0.0;
                            #        var red = Math.floor(redFrac * 255);
                            #        var green = Math.floor(greenFrac * 255);
                            #        var blue = Math.floor(blueFrac * 255);
                            #
                            #        if (!('alpha' in rgb_color)) {
                            #           return rgbToCssColor_(red, green, blue);
                            #        }
                            #
                            #        var alphaFrac = rgb_color.alpha.value || 0.0;
                            #        var rgbParams = [red, green, blue].join(',');
                            #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                            #     };
                            #
                            #     var rgbToCssColor_ = function(red, green, blue) {
                            #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                            #       var hexString = rgbNumber.toString(16);
                            #       var missingZeros = 6 - hexString.length;
                            #       var resultBuilder = ['#'];
                            #       for (var i = 0; i < missingZeros; i++) {
                            #          resultBuilder.push('0');
                            #       }
                            #       resultBuilder.push(hexString);
                            #       return resultBuilder.join('');
                            #     };
                            #
                            #     // ...
                          "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                          "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                              # the final pixel color is defined by the equation:
                              #
                              #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                              #
                              # This means that a value of 1.0 corresponds to a solid color, whereas
                              # a value of 0.0 corresponds to a completely transparent color. This
                              # uses a wrapper message rather than a simple float scalar so that it is
                              # possible to distinguish between a default value and the value being unset.
                              # If omitted, this color object is to be rendered as a solid color
                              # (as if the alpha value had been explicitly given with a value of 1.0).
                          "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                          "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                        },
                        "width": 42, # The width of the border, in pixels.
                            # Deprecated; the width is determined by the "style" field.
                        "style": "A String", # The style of the border.
                      },
                      "left": { # A border along a cell. # The left border of the cell.
                        "color": { # Represents a color in the RGBA color space. This representation is designed # The color of the border.
                            # for simplicity of conversion to/from color representations in various
                            # languages over compactness; for example, the fields of this representation
                            # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                            # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                            # method in iOS; and, with just a little work, it can be easily formatted into
                            # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                            #
                            # Example (Java):
                            #
                            #      import com.google.type.Color;
                            #
                            #      // ...
                            #      public static java.awt.Color fromProto(Color protocolor) {
                            #        float alpha = protocolor.hasAlpha()
                            #            ? protocolor.getAlpha().getValue()
                            #            : 1.0;
                            #
                            #        return new java.awt.Color(
                            #            protocolor.getRed(),
                            #            protocolor.getGreen(),
                            #            protocolor.getBlue(),
                            #            alpha);
                            #      }
                            #
                            #      public static Color toProto(java.awt.Color color) {
                            #        float red = (float) color.getRed();
                            #        float green = (float) color.getGreen();
                            #        float blue = (float) color.getBlue();
                            #        float denominator = 255.0;
                            #        Color.Builder resultBuilder =
                            #            Color
                            #                .newBuilder()
                            #                .setRed(red / denominator)
                            #                .setGreen(green / denominator)
                            #                .setBlue(blue / denominator);
                            #        int alpha = color.getAlpha();
                            #        if (alpha != 255) {
                            #          result.setAlpha(
                            #              FloatValue
                            #                  .newBuilder()
                            #                  .setValue(((float) alpha) / denominator)
                            #                  .build());
                            #        }
                            #        return resultBuilder.build();
                            #      }
                            #      // ...
                            #
                            # Example (iOS / Obj-C):
                            #
                            #      // ...
                            #      static UIColor* fromProto(Color* protocolor) {
                            #         float red = [protocolor red];
                            #         float green = [protocolor green];
                            #         float blue = [protocolor blue];
                            #         FloatValue* alpha_wrapper = [protocolor alpha];
                            #         float alpha = 1.0;
                            #         if (alpha_wrapper != nil) {
                            #           alpha = [alpha_wrapper value];
                            #         }
                            #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                            #      }
                            #
                            #      static Color* toProto(UIColor* color) {
                            #          CGFloat red, green, blue, alpha;
                            #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                            #            return nil;
                            #          }
                            #          Color* result = [[Color alloc] init];
                            #          [result setRed:red];
                            #          [result setGreen:green];
                            #          [result setBlue:blue];
                            #          if (alpha <= 0.9999) {
                            #            [result setAlpha:floatWrapperWithValue(alpha)];
                            #          }
                            #          [result autorelease];
                            #          return result;
                            #     }
                            #     // ...
                            #
                            #  Example (JavaScript):
                            #
                            #     // ...
                            #
                            #     var protoToCssColor = function(rgb_color) {
                            #        var redFrac = rgb_color.red || 0.0;
                            #        var greenFrac = rgb_color.green || 0.0;
                            #        var blueFrac = rgb_color.blue || 0.0;
                            #        var red = Math.floor(redFrac * 255);
                            #        var green = Math.floor(greenFrac * 255);
                            #        var blue = Math.floor(blueFrac * 255);
                            #
                            #        if (!('alpha' in rgb_color)) {
                            #           return rgbToCssColor_(red, green, blue);
                            #        }
                            #
                            #        var alphaFrac = rgb_color.alpha.value || 0.0;
                            #        var rgbParams = [red, green, blue].join(',');
                            #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                            #     };
                            #
                            #     var rgbToCssColor_ = function(red, green, blue) {
                            #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                            #       var hexString = rgbNumber.toString(16);
                            #       var missingZeros = 6 - hexString.length;
                            #       var resultBuilder = ['#'];
                            #       for (var i = 0; i < missingZeros; i++) {
                            #          resultBuilder.push('0');
                            #       }
                            #       resultBuilder.push(hexString);
                            #       return resultBuilder.join('');
                            #     };
                            #
                            #     // ...
                          "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                          "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                              # the final pixel color is defined by the equation:
                              #
                              #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                              #
                              # This means that a value of 1.0 corresponds to a solid color, whereas
                              # a value of 0.0 corresponds to a completely transparent color. This
                              # uses a wrapper message rather than a simple float scalar so that it is
                              # possible to distinguish between a default value and the value being unset.
                              # If omitted, this color object is to be rendered as a solid color
                              # (as if the alpha value had been explicitly given with a value of 1.0).
                          "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                          "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                        },
                        "width": 42, # The width of the border, in pixels.
                            # Deprecated; the width is determined by the "style" field.
                        "style": "A String", # The style of the border.
                      },
                      "bottom": { # A border along a cell. # The bottom border of the cell.
                        "color": { # Represents a color in the RGBA color space. This representation is designed # The color of the border.
                            # for simplicity of conversion to/from color representations in various
                            # languages over compactness; for example, the fields of this representation
                            # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                            # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                            # method in iOS; and, with just a little work, it can be easily formatted into
                            # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                            #
                            # Example (Java):
                            #
                            #      import com.google.type.Color;
                            #
                            #      // ...
                            #      public static java.awt.Color fromProto(Color protocolor) {
                            #        float alpha = protocolor.hasAlpha()
                            #            ? protocolor.getAlpha().getValue()
                            #            : 1.0;
                            #
                            #        return new java.awt.Color(
                            #            protocolor.getRed(),
                            #            protocolor.getGreen(),
                            #            protocolor.getBlue(),
                            #            alpha);
                            #      }
                            #
                            #      public static Color toProto(java.awt.Color color) {
                            #        float red = (float) color.getRed();
                            #        float green = (float) color.getGreen();
                            #        float blue = (float) color.getBlue();
                            #        float denominator = 255.0;
                            #        Color.Builder resultBuilder =
                            #            Color
                            #                .newBuilder()
                            #                .setRed(red / denominator)
                            #                .setGreen(green / denominator)
                            #                .setBlue(blue / denominator);
                            #        int alpha = color.getAlpha();
                            #        if (alpha != 255) {
                            #          result.setAlpha(
                            #              FloatValue
                            #                  .newBuilder()
                            #                  .setValue(((float) alpha) / denominator)
                            #                  .build());
                            #        }
                            #        return resultBuilder.build();
                            #      }
                            #      // ...
                            #
                            # Example (iOS / Obj-C):
                            #
                            #      // ...
                            #      static UIColor* fromProto(Color* protocolor) {
                            #         float red = [protocolor red];
                            #         float green = [protocolor green];
                            #         float blue = [protocolor blue];
                            #         FloatValue* alpha_wrapper = [protocolor alpha];
                            #         float alpha = 1.0;
                            #         if (alpha_wrapper != nil) {
                            #           alpha = [alpha_wrapper value];
                            #         }
                            #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                            #      }
                            #
                            #      static Color* toProto(UIColor* color) {
                            #          CGFloat red, green, blue, alpha;
                            #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                            #            return nil;
                            #          }
                            #          Color* result = [[Color alloc] init];
                            #          [result setRed:red];
                            #          [result setGreen:green];
                            #          [result setBlue:blue];
                            #          if (alpha <= 0.9999) {
                            #            [result setAlpha:floatWrapperWithValue(alpha)];
                            #          }
                            #          [result autorelease];
                            #          return result;
                            #     }
                            #     // ...
                            #
                            #  Example (JavaScript):
                            #
                            #     // ...
                            #
                            #     var protoToCssColor = function(rgb_color) {
                            #        var redFrac = rgb_color.red || 0.0;
                            #        var greenFrac = rgb_color.green || 0.0;
                            #        var blueFrac = rgb_color.blue || 0.0;
                            #        var red = Math.floor(redFrac * 255);
                            #        var green = Math.floor(greenFrac * 255);
                            #        var blue = Math.floor(blueFrac * 255);
                            #
                            #        if (!('alpha' in rgb_color)) {
                            #           return rgbToCssColor_(red, green, blue);
                            #        }
                            #
                            #        var alphaFrac = rgb_color.alpha.value || 0.0;
                            #        var rgbParams = [red, green, blue].join(',');
                            #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                            #     };
                            #
                            #     var rgbToCssColor_ = function(red, green, blue) {
                            #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                            #       var hexString = rgbNumber.toString(16);
                            #       var missingZeros = 6 - hexString.length;
                            #       var resultBuilder = ['#'];
                            #       for (var i = 0; i < missingZeros; i++) {
                            #          resultBuilder.push('0');
                            #       }
                            #       resultBuilder.push(hexString);
                            #       return resultBuilder.join('');
                            #     };
                            #
                            #     // ...
                          "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                          "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                              # the final pixel color is defined by the equation:
                              #
                              #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                              #
                              # This means that a value of 1.0 corresponds to a solid color, whereas
                              # a value of 0.0 corresponds to a completely transparent color. This
                              # uses a wrapper message rather than a simple float scalar so that it is
                              # possible to distinguish between a default value and the value being unset.
                              # If omitted, this color object is to be rendered as a solid color
                              # (as if the alpha value had been explicitly given with a value of 1.0).
                          "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                          "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                        },
                        "width": 42, # The width of the border, in pixels.
                            # Deprecated; the width is determined by the "style" field.
                        "style": "A String", # The style of the border.
                      },
                    },
                    "textRotation": { # The rotation applied to text in a cell. # The rotation applied to text in a cell
                      "angle": 42, # The angle between the standard orientation and the desired orientation.
                          # Measured in degrees. Valid values are between -90 and 90. Positive
                          # angles are angled upwards, negative are angled downwards.
                          #
                          # Note: For LTR text direction positive angles are in the counterclockwise
                          # direction, whereas for RTL they are in the clockwise direction
                      "vertical": True or False, # If true, text reads top to bottom, but the orientation of individual
                          # characters is unchanged.
                          # For example:
                          #
                          #     | V |
                          #     | e |
                          #     | r |
                          #     | t |
                          #     | i |
                          #     | c |
                          #     | a |
                          #     | l |
                    },
                  },
                  "userEnteredFormat": { # The format of a cell. # The format the user entered for the cell.
                      #
                      # When writing, the new format will be merged with the existing format.
                    "numberFormat": { # The number format of a cell. # A format describing how number values should be represented to the user.
                      "pattern": "A String", # Pattern string used for formatting.  If not set, a default pattern based on
                          # the user's locale will be used if necessary for the given type.
                          # See the [Date and Number Formats guide](/sheets/api/guides/formats) for more
                          # information about the supported patterns.
                      "type": "A String", # The type of the number format.
                          # When writing, this field must be set.
                    },
                    "textDirection": "A String", # The direction of the text in the cell.
                    "padding": { # The amount of padding around the cell, in pixels. # The padding of the cell.
                        # When updating padding, every field must be specified.
                      "top": 42, # The top padding of the cell.
                      "right": 42, # The right padding of the cell.
                      "left": 42, # The left padding of the cell.
                      "bottom": 42, # The bottom padding of the cell.
                    },
                    "horizontalAlignment": "A String", # The horizontal alignment of the value in the cell.
                    "backgroundColor": { # Represents a color in the RGBA color space. This representation is designed # The background color of the cell.
                        # for simplicity of conversion to/from color representations in various
                        # languages over compactness; for example, the fields of this representation
                        # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                        # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                        # method in iOS; and, with just a little work, it can be easily formatted into
                        # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                        #
                        # Example (Java):
                        #
                        #      import com.google.type.Color;
                        #
                        #      // ...
                        #      public static java.awt.Color fromProto(Color protocolor) {
                        #        float alpha = protocolor.hasAlpha()
                        #            ? protocolor.getAlpha().getValue()
                        #            : 1.0;
                        #
                        #        return new java.awt.Color(
                        #            protocolor.getRed(),
                        #            protocolor.getGreen(),
                        #            protocolor.getBlue(),
                        #            alpha);
                        #      }
                        #
                        #      public static Color toProto(java.awt.Color color) {
                        #        float red = (float) color.getRed();
                        #        float green = (float) color.getGreen();
                        #        float blue = (float) color.getBlue();
                        #        float denominator = 255.0;
                        #        Color.Builder resultBuilder =
                        #            Color
                        #                .newBuilder()
                        #                .setRed(red / denominator)
                        #                .setGreen(green / denominator)
                        #                .setBlue(blue / denominator);
                        #        int alpha = color.getAlpha();
                        #        if (alpha != 255) {
                        #          result.setAlpha(
                        #              FloatValue
                        #                  .newBuilder()
                        #                  .setValue(((float) alpha) / denominator)
                        #                  .build());
                        #        }
                        #        return resultBuilder.build();
                        #      }
                        #      // ...
                        #
                        # Example (iOS / Obj-C):
                        #
                        #      // ...
                        #      static UIColor* fromProto(Color* protocolor) {
                        #         float red = [protocolor red];
                        #         float green = [protocolor green];
                        #         float blue = [protocolor blue];
                        #         FloatValue* alpha_wrapper = [protocolor alpha];
                        #         float alpha = 1.0;
                        #         if (alpha_wrapper != nil) {
                        #           alpha = [alpha_wrapper value];
                        #         }
                        #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                        #      }
                        #
                        #      static Color* toProto(UIColor* color) {
                        #          CGFloat red, green, blue, alpha;
                        #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                        #            return nil;
                        #          }
                        #          Color* result = [[Color alloc] init];
                        #          [result setRed:red];
                        #          [result setGreen:green];
                        #          [result setBlue:blue];
                        #          if (alpha <= 0.9999) {
                        #            [result setAlpha:floatWrapperWithValue(alpha)];
                        #          }
                        #          [result autorelease];
                        #          return result;
                        #     }
                        #     // ...
                        #
                        #  Example (JavaScript):
                        #
                        #     // ...
                        #
                        #     var protoToCssColor = function(rgb_color) {
                        #        var redFrac = rgb_color.red || 0.0;
                        #        var greenFrac = rgb_color.green || 0.0;
                        #        var blueFrac = rgb_color.blue || 0.0;
                        #        var red = Math.floor(redFrac * 255);
                        #        var green = Math.floor(greenFrac * 255);
                        #        var blue = Math.floor(blueFrac * 255);
                        #
                        #        if (!('alpha' in rgb_color)) {
                        #           return rgbToCssColor_(red, green, blue);
                        #        }
                        #
                        #        var alphaFrac = rgb_color.alpha.value || 0.0;
                        #        var rgbParams = [red, green, blue].join(',');
                        #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                        #     };
                        #
                        #     var rgbToCssColor_ = function(red, green, blue) {
                        #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                        #       var hexString = rgbNumber.toString(16);
                        #       var missingZeros = 6 - hexString.length;
                        #       var resultBuilder = ['#'];
                        #       for (var i = 0; i < missingZeros; i++) {
                        #          resultBuilder.push('0');
                        #       }
                        #       resultBuilder.push(hexString);
                        #       return resultBuilder.join('');
                        #     };
                        #
                        #     // ...
                      "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                      "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                          # the final pixel color is defined by the equation:
                          #
                          #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                          #
                          # This means that a value of 1.0 corresponds to a solid color, whereas
                          # a value of 0.0 corresponds to a completely transparent color. This
                          # uses a wrapper message rather than a simple float scalar so that it is
                          # possible to distinguish between a default value and the value being unset.
                          # If omitted, this color object is to be rendered as a solid color
                          # (as if the alpha value had been explicitly given with a value of 1.0).
                      "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                      "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                    },
                    "verticalAlignment": "A String", # The vertical alignment of the value in the cell.
                    "textFormat": { # The format of a run of text in a cell. # The format of the text in the cell (unless overridden by a format run).
                        # Absent values indicate that the field isn't specified.
                      "foregroundColor": { # Represents a color in the RGBA color space. This representation is designed # The foreground color of the text.
                          # for simplicity of conversion to/from color representations in various
                          # languages over compactness; for example, the fields of this representation
                          # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                          # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                          # method in iOS; and, with just a little work, it can be easily formatted into
                          # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                          #
                          # Example (Java):
                          #
                          #      import com.google.type.Color;
                          #
                          #      // ...
                          #      public static java.awt.Color fromProto(Color protocolor) {
                          #        float alpha = protocolor.hasAlpha()
                          #            ? protocolor.getAlpha().getValue()
                          #            : 1.0;
                          #
                          #        return new java.awt.Color(
                          #            protocolor.getRed(),
                          #            protocolor.getGreen(),
                          #            protocolor.getBlue(),
                          #            alpha);
                          #      }
                          #
                          #      public static Color toProto(java.awt.Color color) {
                          #        float red = (float) color.getRed();
                          #        float green = (float) color.getGreen();
                          #        float blue = (float) color.getBlue();
                          #        float denominator = 255.0;
                          #        Color.Builder resultBuilder =
                          #            Color
                          #                .newBuilder()
                          #                .setRed(red / denominator)
                          #                .setGreen(green / denominator)
                          #                .setBlue(blue / denominator);
                          #        int alpha = color.getAlpha();
                          #        if (alpha != 255) {
                          #          result.setAlpha(
                          #              FloatValue
                          #                  .newBuilder()
                          #                  .setValue(((float) alpha) / denominator)
                          #                  .build());
                          #        }
                          #        return resultBuilder.build();
                          #      }
                          #      // ...
                          #
                          # Example (iOS / Obj-C):
                          #
                          #      // ...
                          #      static UIColor* fromProto(Color* protocolor) {
                          #         float red = [protocolor red];
                          #         float green = [protocolor green];
                          #         float blue = [protocolor blue];
                          #         FloatValue* alpha_wrapper = [protocolor alpha];
                          #         float alpha = 1.0;
                          #         if (alpha_wrapper != nil) {
                          #           alpha = [alpha_wrapper value];
                          #         }
                          #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                          #      }
                          #
                          #      static Color* toProto(UIColor* color) {
                          #          CGFloat red, green, blue, alpha;
                          #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                          #            return nil;
                          #          }
                          #          Color* result = [[Color alloc] init];
                          #          [result setRed:red];
                          #          [result setGreen:green];
                          #          [result setBlue:blue];
                          #          if (alpha <= 0.9999) {
                          #            [result setAlpha:floatWrapperWithValue(alpha)];
                          #          }
                          #          [result autorelease];
                          #          return result;
                          #     }
                          #     // ...
                          #
                          #  Example (JavaScript):
                          #
                          #     // ...
                          #
                          #     var protoToCssColor = function(rgb_color) {
                          #        var redFrac = rgb_color.red || 0.0;
                          #        var greenFrac = rgb_color.green || 0.0;
                          #        var blueFrac = rgb_color.blue || 0.0;
                          #        var red = Math.floor(redFrac * 255);
                          #        var green = Math.floor(greenFrac * 255);
                          #        var blue = Math.floor(blueFrac * 255);
                          #
                          #        if (!('alpha' in rgb_color)) {
                          #           return rgbToCssColor_(red, green, blue);
                          #        }
                          #
                          #        var alphaFrac = rgb_color.alpha.value || 0.0;
                          #        var rgbParams = [red, green, blue].join(',');
                          #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                          #     };
                          #
                          #     var rgbToCssColor_ = function(red, green, blue) {
                          #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                          #       var hexString = rgbNumber.toString(16);
                          #       var missingZeros = 6 - hexString.length;
                          #       var resultBuilder = ['#'];
                          #       for (var i = 0; i < missingZeros; i++) {
                          #          resultBuilder.push('0');
                          #       }
                          #       resultBuilder.push(hexString);
                          #       return resultBuilder.join('');
                          #     };
                          #
                          #     // ...
                        "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                        "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                            # the final pixel color is defined by the equation:
                            #
                            #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                            #
                            # This means that a value of 1.0 corresponds to a solid color, whereas
                            # a value of 0.0 corresponds to a completely transparent color. This
                            # uses a wrapper message rather than a simple float scalar so that it is
                            # possible to distinguish between a default value and the value being unset.
                            # If omitted, this color object is to be rendered as a solid color
                            # (as if the alpha value had been explicitly given with a value of 1.0).
                        "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                        "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                      },
                      "bold": True or False, # True if the text is bold.
                      "strikethrough": True or False, # True if the text has a strikethrough.
                      "fontFamily": "A String", # The font family.
                      "fontSize": 42, # The size of the font.
                      "italic": True or False, # True if the text is italicized.
                      "underline": True or False, # True if the text is underlined.
                    },
                    "wrapStrategy": "A String", # The wrap strategy for the value in the cell.
                    "hyperlinkDisplayType": "A String", # How a hyperlink, if it exists, should be displayed in the cell.
                    "borders": { # The borders of the cell. # The borders of the cell.
                      "top": { # A border along a cell. # The top border of the cell.
                        "color": { # Represents a color in the RGBA color space. This representation is designed # The color of the border.
                            # for simplicity of conversion to/from color representations in various
                            # languages over compactness; for example, the fields of this representation
                            # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                            # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                            # method in iOS; and, with just a little work, it can be easily formatted into
                            # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                            #
                            # Example (Java):
                            #
                            #      import com.google.type.Color;
                            #
                            #      // ...
                            #      public static java.awt.Color fromProto(Color protocolor) {
                            #        float alpha = protocolor.hasAlpha()
                            #            ? protocolor.getAlpha().getValue()
                            #            : 1.0;
                            #
                            #        return new java.awt.Color(
                            #            protocolor.getRed(),
                            #            protocolor.getGreen(),
                            #            protocolor.getBlue(),
                            #            alpha);
                            #      }
                            #
                            #      public static Color toProto(java.awt.Color color) {
                            #        float red = (float) color.getRed();
                            #        float green = (float) color.getGreen();
                            #        float blue = (float) color.getBlue();
                            #        float denominator = 255.0;
                            #        Color.Builder resultBuilder =
                            #            Color
                            #                .newBuilder()
                            #                .setRed(red / denominator)
                            #                .setGreen(green / denominator)
                            #                .setBlue(blue / denominator);
                            #        int alpha = color.getAlpha();
                            #        if (alpha != 255) {
                            #          result.setAlpha(
                            #              FloatValue
                            #                  .newBuilder()
                            #                  .setValue(((float) alpha) / denominator)
                            #                  .build());
                            #        }
                            #        return resultBuilder.build();
                            #      }
                            #      // ...
                            #
                            # Example (iOS / Obj-C):
                            #
                            #      // ...
                            #      static UIColor* fromProto(Color* protocolor) {
                            #         float red = [protocolor red];
                            #         float green = [protocolor green];
                            #         float blue = [protocolor blue];
                            #         FloatValue* alpha_wrapper = [protocolor alpha];
                            #         float alpha = 1.0;
                            #         if (alpha_wrapper != nil) {
                            #           alpha = [alpha_wrapper value];
                            #         }
                            #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                            #      }
                            #
                            #      static Color* toProto(UIColor* color) {
                            #          CGFloat red, green, blue, alpha;
                            #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                            #            return nil;
                            #          }
                            #          Color* result = [[Color alloc] init];
                            #          [result setRed:red];
                            #          [result setGreen:green];
                            #          [result setBlue:blue];
                            #          if (alpha <= 0.9999) {
                            #            [result setAlpha:floatWrapperWithValue(alpha)];
                            #          }
                            #          [result autorelease];
                            #          return result;
                            #     }
                            #     // ...
                            #
                            #  Example (JavaScript):
                            #
                            #     // ...
                            #
                            #     var protoToCssColor = function(rgb_color) {
                            #        var redFrac = rgb_color.red || 0.0;
                            #        var greenFrac = rgb_color.green || 0.0;
                            #        var blueFrac = rgb_color.blue || 0.0;
                            #        var red = Math.floor(redFrac * 255);
                            #        var green = Math.floor(greenFrac * 255);
                            #        var blue = Math.floor(blueFrac * 255);
                            #
                            #        if (!('alpha' in rgb_color)) {
                            #           return rgbToCssColor_(red, green, blue);
                            #        }
                            #
                            #        var alphaFrac = rgb_color.alpha.value || 0.0;
                            #        var rgbParams = [red, green, blue].join(',');
                            #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                            #     };
                            #
                            #     var rgbToCssColor_ = function(red, green, blue) {
                            #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                            #       var hexString = rgbNumber.toString(16);
                            #       var missingZeros = 6 - hexString.length;
                            #       var resultBuilder = ['#'];
                            #       for (var i = 0; i < missingZeros; i++) {
                            #          resultBuilder.push('0');
                            #       }
                            #       resultBuilder.push(hexString);
                            #       return resultBuilder.join('');
                            #     };
                            #
                            #     // ...
                          "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                          "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                              # the final pixel color is defined by the equation:
                              #
                              #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                              #
                              # This means that a value of 1.0 corresponds to a solid color, whereas
                              # a value of 0.0 corresponds to a completely transparent color. This
                              # uses a wrapper message rather than a simple float scalar so that it is
                              # possible to distinguish between a default value and the value being unset.
                              # If omitted, this color object is to be rendered as a solid color
                              # (as if the alpha value had been explicitly given with a value of 1.0).
                          "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                          "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                        },
                        "width": 42, # The width of the border, in pixels.
                            # Deprecated; the width is determined by the "style" field.
                        "style": "A String", # The style of the border.
                      },
                      "right": { # A border along a cell. # The right border of the cell.
                        "color": { # Represents a color in the RGBA color space. This representation is designed # The color of the border.
                            # for simplicity of conversion to/from color representations in various
                            # languages over compactness; for example, the fields of this representation
                            # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                            # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                            # method in iOS; and, with just a little work, it can be easily formatted into
                            # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                            #
                            # Example (Java):
                            #
                            #      import com.google.type.Color;
                            #
                            #      // ...
                            #      public static java.awt.Color fromProto(Color protocolor) {
                            #        float alpha = protocolor.hasAlpha()
                            #            ? protocolor.getAlpha().getValue()
                            #            : 1.0;
                            #
                            #        return new java.awt.Color(
                            #            protocolor.getRed(),
                            #            protocolor.getGreen(),
                            #            protocolor.getBlue(),
                            #            alpha);
                            #      }
                            #
                            #      public static Color toProto(java.awt.Color color) {
                            #        float red = (float) color.getRed();
                            #        float green = (float) color.getGreen();
                            #        float blue = (float) color.getBlue();
                            #        float denominator = 255.0;
                            #        Color.Builder resultBuilder =
                            #            Color
                            #                .newBuilder()
                            #                .setRed(red / denominator)
                            #                .setGreen(green / denominator)
                            #                .setBlue(blue / denominator);
                            #        int alpha = color.getAlpha();
                            #        if (alpha != 255) {
                            #          result.setAlpha(
                            #              FloatValue
                            #                  .newBuilder()
                            #                  .setValue(((float) alpha) / denominator)
                            #                  .build());
                            #        }
                            #        return resultBuilder.build();
                            #      }
                            #      // ...
                            #
                            # Example (iOS / Obj-C):
                            #
                            #      // ...
                            #      static UIColor* fromProto(Color* protocolor) {
                            #         float red = [protocolor red];
                            #         float green = [protocolor green];
                            #         float blue = [protocolor blue];
                            #         FloatValue* alpha_wrapper = [protocolor alpha];
                            #         float alpha = 1.0;
                            #         if (alpha_wrapper != nil) {
                            #           alpha = [alpha_wrapper value];
                            #         }
                            #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                            #      }
                            #
                            #      static Color* toProto(UIColor* color) {
                            #          CGFloat red, green, blue, alpha;
                            #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                            #            return nil;
                            #          }
                            #          Color* result = [[Color alloc] init];
                            #          [result setRed:red];
                            #          [result setGreen:green];
                            #          [result setBlue:blue];
                            #          if (alpha <= 0.9999) {
                            #            [result setAlpha:floatWrapperWithValue(alpha)];
                            #          }
                            #          [result autorelease];
                            #          return result;
                            #     }
                            #     // ...
                            #
                            #  Example (JavaScript):
                            #
                            #     // ...
                            #
                            #     var protoToCssColor = function(rgb_color) {
                            #        var redFrac = rgb_color.red || 0.0;
                            #        var greenFrac = rgb_color.green || 0.0;
                            #        var blueFrac = rgb_color.blue || 0.0;
                            #        var red = Math.floor(redFrac * 255);
                            #        var green = Math.floor(greenFrac * 255);
                            #        var blue = Math.floor(blueFrac * 255);
                            #
                            #        if (!('alpha' in rgb_color)) {
                            #           return rgbToCssColor_(red, green, blue);
                            #        }
                            #
                            #        var alphaFrac = rgb_color.alpha.value || 0.0;
                            #        var rgbParams = [red, green, blue].join(',');
                            #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                            #     };
                            #
                            #     var rgbToCssColor_ = function(red, green, blue) {
                            #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                            #       var hexString = rgbNumber.toString(16);
                            #       var missingZeros = 6 - hexString.length;
                            #       var resultBuilder = ['#'];
                            #       for (var i = 0; i < missingZeros; i++) {
                            #          resultBuilder.push('0');
                            #       }
                            #       resultBuilder.push(hexString);
                            #       return resultBuilder.join('');
                            #     };
                            #
                            #     // ...
                          "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                          "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                              # the final pixel color is defined by the equation:
                              #
                              #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                              #
                              # This means that a value of 1.0 corresponds to a solid color, whereas
                              # a value of 0.0 corresponds to a completely transparent color. This
                              # uses a wrapper message rather than a simple float scalar so that it is
                              # possible to distinguish between a default value and the value being unset.
                              # If omitted, this color object is to be rendered as a solid color
                              # (as if the alpha value had been explicitly given with a value of 1.0).
                          "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                          "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                        },
                        "width": 42, # The width of the border, in pixels.
                            # Deprecated; the width is determined by the "style" field.
                        "style": "A String", # The style of the border.
                      },
                      "left": { # A border along a cell. # The left border of the cell.
                        "color": { # Represents a color in the RGBA color space. This representation is designed # The color of the border.
                            # for simplicity of conversion to/from color representations in various
                            # languages over compactness; for example, the fields of this representation
                            # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                            # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                            # method in iOS; and, with just a little work, it can be easily formatted into
                            # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                            #
                            # Example (Java):
                            #
                            #      import com.google.type.Color;
                            #
                            #      // ...
                            #      public static java.awt.Color fromProto(Color protocolor) {
                            #        float alpha = protocolor.hasAlpha()
                            #            ? protocolor.getAlpha().getValue()
                            #            : 1.0;
                            #
                            #        return new java.awt.Color(
                            #            protocolor.getRed(),
                            #            protocolor.getGreen(),
                            #            protocolor.getBlue(),
                            #            alpha);
                            #      }
                            #
                            #      public static Color toProto(java.awt.Color color) {
                            #        float red = (float) color.getRed();
                            #        float green = (float) color.getGreen();
                            #        float blue = (float) color.getBlue();
                            #        float denominator = 255.0;
                            #        Color.Builder resultBuilder =
                            #            Color
                            #                .newBuilder()
                            #                .setRed(red / denominator)
                            #                .setGreen(green / denominator)
                            #                .setBlue(blue / denominator);
                            #        int alpha = color.getAlpha();
                            #        if (alpha != 255) {
                            #          result.setAlpha(
                            #              FloatValue
                            #                  .newBuilder()
                            #                  .setValue(((float) alpha) / denominator)
                            #                  .build());
                            #        }
                            #        return resultBuilder.build();
                            #      }
                            #      // ...
                            #
                            # Example (iOS / Obj-C):
                            #
                            #      // ...
                            #      static UIColor* fromProto(Color* protocolor) {
                            #         float red = [protocolor red];
                            #         float green = [protocolor green];
                            #         float blue = [protocolor blue];
                            #         FloatValue* alpha_wrapper = [protocolor alpha];
                            #         float alpha = 1.0;
                            #         if (alpha_wrapper != nil) {
                            #           alpha = [alpha_wrapper value];
                            #         }
                            #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                            #      }
                            #
                            #      static Color* toProto(UIColor* color) {
                            #          CGFloat red, green, blue, alpha;
                            #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                            #            return nil;
                            #          }
                            #          Color* result = [[Color alloc] init];
                            #          [result setRed:red];
                            #          [result setGreen:green];
                            #          [result setBlue:blue];
                            #          if (alpha <= 0.9999) {
                            #            [result setAlpha:floatWrapperWithValue(alpha)];
                            #          }
                            #          [result autorelease];
                            #          return result;
                            #     }
                            #     // ...
                            #
                            #  Example (JavaScript):
                            #
                            #     // ...
                            #
                            #     var protoToCssColor = function(rgb_color) {
                            #        var redFrac = rgb_color.red || 0.0;
                            #        var greenFrac = rgb_color.green || 0.0;
                            #        var blueFrac = rgb_color.blue || 0.0;
                            #        var red = Math.floor(redFrac * 255);
                            #        var green = Math.floor(greenFrac * 255);
                            #        var blue = Math.floor(blueFrac * 255);
                            #
                            #        if (!('alpha' in rgb_color)) {
                            #           return rgbToCssColor_(red, green, blue);
                            #        }
                            #
                            #        var alphaFrac = rgb_color.alpha.value || 0.0;
                            #        var rgbParams = [red, green, blue].join(',');
                            #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                            #     };
                            #
                            #     var rgbToCssColor_ = function(red, green, blue) {
                            #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                            #       var hexString = rgbNumber.toString(16);
                            #       var missingZeros = 6 - hexString.length;
                            #       var resultBuilder = ['#'];
                            #       for (var i = 0; i < missingZeros; i++) {
                            #          resultBuilder.push('0');
                            #       }
                            #       resultBuilder.push(hexString);
                            #       return resultBuilder.join('');
                            #     };
                            #
                            #     // ...
                          "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                          "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                              # the final pixel color is defined by the equation:
                              #
                              #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                              #
                              # This means that a value of 1.0 corresponds to a solid color, whereas
                              # a value of 0.0 corresponds to a completely transparent color. This
                              # uses a wrapper message rather than a simple float scalar so that it is
                              # possible to distinguish between a default value and the value being unset.
                              # If omitted, this color object is to be rendered as a solid color
                              # (as if the alpha value had been explicitly given with a value of 1.0).
                          "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                          "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                        },
                        "width": 42, # The width of the border, in pixels.
                            # Deprecated; the width is determined by the "style" field.
                        "style": "A String", # The style of the border.
                      },
                      "bottom": { # A border along a cell. # The bottom border of the cell.
                        "color": { # Represents a color in the RGBA color space. This representation is designed # The color of the border.
                            # for simplicity of conversion to/from color representations in various
                            # languages over compactness; for example, the fields of this representation
                            # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                            # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                            # method in iOS; and, with just a little work, it can be easily formatted into
                            # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                            #
                            # Example (Java):
                            #
                            #      import com.google.type.Color;
                            #
                            #      // ...
                            #      public static java.awt.Color fromProto(Color protocolor) {
                            #        float alpha = protocolor.hasAlpha()
                            #            ? protocolor.getAlpha().getValue()
                            #            : 1.0;
                            #
                            #        return new java.awt.Color(
                            #            protocolor.getRed(),
                            #            protocolor.getGreen(),
                            #            protocolor.getBlue(),
                            #            alpha);
                            #      }
                            #
                            #      public static Color toProto(java.awt.Color color) {
                            #        float red = (float) color.getRed();
                            #        float green = (float) color.getGreen();
                            #        float blue = (float) color.getBlue();
                            #        float denominator = 255.0;
                            #        Color.Builder resultBuilder =
                            #            Color
                            #                .newBuilder()
                            #                .setRed(red / denominator)
                            #                .setGreen(green / denominator)
                            #                .setBlue(blue / denominator);
                            #        int alpha = color.getAlpha();
                            #        if (alpha != 255) {
                            #          result.setAlpha(
                            #              FloatValue
                            #                  .newBuilder()
                            #                  .setValue(((float) alpha) / denominator)
                            #                  .build());
                            #        }
                            #        return resultBuilder.build();
                            #      }
                            #      // ...
                            #
                            # Example (iOS / Obj-C):
                            #
                            #      // ...
                            #      static UIColor* fromProto(Color* protocolor) {
                            #         float red = [protocolor red];
                            #         float green = [protocolor green];
                            #         float blue = [protocolor blue];
                            #         FloatValue* alpha_wrapper = [protocolor alpha];
                            #         float alpha = 1.0;
                            #         if (alpha_wrapper != nil) {
                            #           alpha = [alpha_wrapper value];
                            #         }
                            #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                            #      }
                            #
                            #      static Color* toProto(UIColor* color) {
                            #          CGFloat red, green, blue, alpha;
                            #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                            #            return nil;
                            #          }
                            #          Color* result = [[Color alloc] init];
                            #          [result setRed:red];
                            #          [result setGreen:green];
                            #          [result setBlue:blue];
                            #          if (alpha <= 0.9999) {
                            #            [result setAlpha:floatWrapperWithValue(alpha)];
                            #          }
                            #          [result autorelease];
                            #          return result;
                            #     }
                            #     // ...
                            #
                            #  Example (JavaScript):
                            #
                            #     // ...
                            #
                            #     var protoToCssColor = function(rgb_color) {
                            #        var redFrac = rgb_color.red || 0.0;
                            #        var greenFrac = rgb_color.green || 0.0;
                            #        var blueFrac = rgb_color.blue || 0.0;
                            #        var red = Math.floor(redFrac * 255);
                            #        var green = Math.floor(greenFrac * 255);
                            #        var blue = Math.floor(blueFrac * 255);
                            #
                            #        if (!('alpha' in rgb_color)) {
                            #           return rgbToCssColor_(red, green, blue);
                            #        }
                            #
                            #        var alphaFrac = rgb_color.alpha.value || 0.0;
                            #        var rgbParams = [red, green, blue].join(',');
                            #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                            #     };
                            #
                            #     var rgbToCssColor_ = function(red, green, blue) {
                            #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                            #       var hexString = rgbNumber.toString(16);
                            #       var missingZeros = 6 - hexString.length;
                            #       var resultBuilder = ['#'];
                            #       for (var i = 0; i < missingZeros; i++) {
                            #          resultBuilder.push('0');
                            #       }
                            #       resultBuilder.push(hexString);
                            #       return resultBuilder.join('');
                            #     };
                            #
                            #     // ...
                          "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                          "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                              # the final pixel color is defined by the equation:
                              #
                              #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                              #
                              # This means that a value of 1.0 corresponds to a solid color, whereas
                              # a value of 0.0 corresponds to a completely transparent color. This
                              # uses a wrapper message rather than a simple float scalar so that it is
                              # possible to distinguish between a default value and the value being unset.
                              # If omitted, this color object is to be rendered as a solid color
                              # (as if the alpha value had been explicitly given with a value of 1.0).
                          "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                          "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                        },
                        "width": 42, # The width of the border, in pixels.
                            # Deprecated; the width is determined by the "style" field.
                        "style": "A String", # The style of the border.
                      },
                    },
                    "textRotation": { # The rotation applied to text in a cell. # The rotation applied to text in a cell
                      "angle": 42, # The angle between the standard orientation and the desired orientation.
                          # Measured in degrees. Valid values are between -90 and 90. Positive
                          # angles are angled upwards, negative are angled downwards.
                          #
                          # Note: For LTR text direction positive angles are in the counterclockwise
                          # direction, whereas for RTL they are in the clockwise direction
                      "vertical": True or False, # If true, text reads top to bottom, but the orientation of individual
                          # characters is unchanged.
                          # For example:
                          #
                          #     | V |
                          #     | e |
                          #     | r |
                          #     | t |
                          #     | i |
                          #     | c |
                          #     | a |
                          #     | l |
                    },
                  },
                  "dataValidation": { # A data validation rule. # A data validation rule on the cell, if any.
                      #
                      # When writing, the new data validation rule will overwrite any prior rule.
                    "showCustomUi": True or False, # True if the UI should be customized based on the kind of condition.
                        # If true, "List" conditions will show a dropdown.
                    "strict": True or False, # True if invalid data should be rejected.
                    "inputMessage": "A String", # A message to show the user when adding data to the cell.
                    "condition": { # A condition that can evaluate to true or false. # The condition that data in the cell must match.
                        # BooleanConditions are used by conditional formatting,
                        # data validation, and the criteria in filters.
                      "values": [ # The values of the condition. The number of supported values depends
                          # on the condition type.  Some support zero values,
                          # others one or two values,
                          # and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
                        { # The value of the condition.
                          "relativeDate": "A String", # A relative date (based on the current date).
                              # Valid only if the type is
                              # DATE_BEFORE,
                              # DATE_AFTER,
                              # DATE_ON_OR_BEFORE or
                              # DATE_ON_OR_AFTER.
                              #
                              # Relative dates are not supported in data validation.
                              # They are supported only in conditional formatting and
                              # conditional filters.
                          "userEnteredValue": "A String", # A value the condition is based on.
                              # The value is parsed as if the user typed into a cell.
                              # Formulas are supported (and must begin with an `=` or a '+').
                        },
                      ],
                      "type": "A String", # The type of condition.
                    },
                  },
                  "textFormatRuns": [ # Runs of rich text applied to subsections of the cell.  Runs are only valid
                      # on user entered strings, not formulas, bools, or numbers.
                      # Runs start at specific indexes in the text and continue until the next
                      # run. Properties of a run will continue unless explicitly changed
                      # in a subsequent run (and properties of the first run will continue
                      # the properties of the cell unless explicitly changed).
                      #
                      # When writing, the new runs will overwrite any prior runs.  When writing a
                      # new user_entered_value, previous runs are erased.
                    { # A run of a text format. The format of this run continues until the start
                        # index of the next run.
                        # When updating, all fields must be set.
                      "startIndex": 42, # The character index where this run starts.
                      "format": { # The format of a run of text in a cell. # The format of this run.  Absent values inherit the cell's format.
                          # Absent values indicate that the field isn't specified.
                        "foregroundColor": { # Represents a color in the RGBA color space. This representation is designed # The foreground color of the text.
                            # for simplicity of conversion to/from color representations in various
                            # languages over compactness; for example, the fields of this representation
                            # can be trivially provided to the constructor of "java.awt.Color" in Java; it
                            # can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
                            # method in iOS; and, with just a little work, it can be easily formatted into
                            # a CSS "rgba()" string in JavaScript, as well. Here are some examples:
                            #
                            # Example (Java):
                            #
                            #      import com.google.type.Color;
                            #
                            #      // ...
                            #      public static java.awt.Color fromProto(Color protocolor) {
                            #        float alpha = protocolor.hasAlpha()
                            #            ? protocolor.getAlpha().getValue()
                            #            : 1.0;
                            #
                            #        return new java.awt.Color(
                            #            protocolor.getRed(),
                            #            protocolor.getGreen(),
                            #            protocolor.getBlue(),
                            #            alpha);
                            #      }
                            #
                            #      public static Color toProto(java.awt.Color color) {
                            #        float red = (float) color.getRed();
                            #        float green = (float) color.getGreen();
                            #        float blue = (float) color.getBlue();
                            #        float denominator = 255.0;
                            #        Color.Builder resultBuilder =
                            #            Color
                            #                .newBuilder()
                            #                .setRed(red / denominator)
                            #                .setGreen(green / denominator)
                            #                .setBlue(blue / denominator);
                            #        int alpha = color.getAlpha();
                            #        if (alpha != 255) {
                            #          result.setAlpha(
                            #              FloatValue
                            #                  .newBuilder()
                            #                  .setValue(((float) alpha) / denominator)
                            #                  .build());
                            #        }
                            #        return resultBuilder.build();
                            #      }
                            #      // ...
                            #
                            # Example (iOS / Obj-C):
                            #
                            #      // ...
                            #      static UIColor* fromProto(Color* protocolor) {
                            #         float red = [protocolor red];
                            #         float green = [protocolor green];
                            #         float blue = [protocolor blue];
                            #         FloatValue* alpha_wrapper = [protocolor alpha];
                            #         float alpha = 1.0;
                            #         if (alpha_wrapper != nil) {
                            #           alpha = [alpha_wrapper value];
                            #         }
                            #         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
                            #      }
                            #
                            #      static Color* toProto(UIColor* color) {
                            #          CGFloat red, green, blue, alpha;
                            #          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                            #            return nil;
                            #          }
                            #          Color* result = [[Color alloc] init];
                            #          [result setRed:red];
                            #          [result setGreen:green];
                            #          [result setBlue:blue];
                            #          if (alpha <= 0.9999) {
                            #            [result setAlpha:floatWrapperWithValue(alpha)];
                            #          }
                            #          [result autorelease];
                            #          return result;
                            #     }
                            #     // ...
                            #
                            #  Example (JavaScript):
                            #
                            #     // ...
                            #
                            #     var protoToCssColor = function(rgb_color) {
                            #        var redFrac = rgb_color.red || 0.0;
                            #        var greenFrac = rgb_color.green || 0.0;
                            #        var blueFrac = rgb_color.blue || 0.0;
                            #        var red = Math.floor(redFrac * 255);
                            #        var green = Math.floor(greenFrac * 255);
                            #        var blue = Math.floor(blueFrac * 255);
                            #
                            #        if (!('alpha' in rgb_color)) {
                            #           return rgbToCssColor_(red, green, blue);
                            #        }
                            #
                            #        var alphaFrac = rgb_color.alpha.value || 0.0;
                            #        var rgbParams = [red, green, blue].join(',');
                            #        return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
                            #     };
                            #
                            #     var rgbToCssColor_ = function(red, green, blue) {
                            #       var rgbNumber = new Number((red << 16) | (green << 8) | blue);
                            #       var hexString = rgbNumber.toString(16);
                            #       var missingZeros = 6 - hexString.length;
                            #       var resultBuilder = ['#'];
                            #       for (var i = 0; i < missingZeros; i++) {
                            #          resultBuilder.push('0');
                            #       }
                            #       resultBuilder.push(hexString);
                            #       return resultBuilder.join('');
                            #     };
                            #
                            #     // ...
                          "blue": 3.14, # The amount of blue in the color as a value in the interval [0, 1].
                          "alpha": 3.14, # The fraction of this color that should be applied to the pixel. That is,
                              # the final pixel color is defined by the equation:
                              #
                              #   pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
                              #
                              # This means that a value of 1.0 corresponds to a solid color, whereas
                              # a value of 0.0 corresponds to a completely transparent color. This
                              # uses a wrapper message rather than a simple float scalar so that it is
                              # possible to distinguish between a default value and the value being unset.
                              # If omitted, this color object is to be rendered as a solid color
                              # (as if the alpha value had been explicitly given with a value of 1.0).
                          "green": 3.14, # The amount of green in the color as a value in the interval [0, 1].
                          "red": 3.14, # The amount of red in the color as a value in the interval [0, 1].
                        },
                        "bold": True or False, # True if the text is bold.
                        "strikethrough": True or False, # True if the text has a strikethrough.
                        "fontFamily": "A String", # The font family.
                        "fontSize": 42, # The size of the font.
                        "italic": True or False, # True if the text is italicized.
                        "underline": True or False, # True if the text is underlined.
                      },
                    },
                  ],
                },
              ],
            },
          ],
          "fields": "A String", # The fields of CellData that should be updated.
              # At least one field must be specified.
              # The root is the CellData; 'row.values.' should not be specified.
              # A single `"*"` can be used as short-hand for listing every field.
        },
        "updateFilterView": { # Updates properties of the filter view. # Updates the properties of a filter view.
          "filter": { # A filter view. # The new properties of the filter view.
            "title": "A String", # The name of the filter view.
            "namedRangeId": "A String", # The named range this filter view is backed by, if any.
                #
                # When writing, only one of range or named_range_id
                # may be set.
            "filterViewId": 42, # The ID of the filter view.
            "range": { # A range on a sheet. # The range this filter view covers.
                #
                # When writing, only one of range or named_range_id
                # may be set.
                # All indexes are zero-based.
                # Indexes are half open, e.g the start index is inclusive
                # and the end index is exclusive -- [start_index, end_index).
                # Missing indexes indicate the range is unbounded on that side.
                #
                # For example, if `"Sheet1"` is sheet ID 0, then:
                #
                #   `Sheet1!A1:A1 == sheet_id: 0,
                #                   start_row_index: 0, end_row_index: 1,
                #                   start_column_index: 0, end_column_index: 1`
                #
                #   `Sheet1!A3:B4 == sheet_id: 0,
                #                   start_row_index: 2, end_row_index: 4,
                #                   start_column_index: 0, end_column_index: 2`
                #
                #   `Sheet1!A:B == sheet_id: 0,
                #                 start_column_index: 0, end_column_index: 2`
                #
                #   `Sheet1!A5:B == sheet_id: 0,
                #                  start_row_index: 4,
                #                  start_column_index: 0, end_column_index: 2`
                #
                #   `Sheet1 == sheet_id:0`
                #
                # The start index must always be less than or equal to the end index.
                # If the start index equals the end index, then the range is empty.
                # Empty ranges are typically not meaningful and are usually rendered in the
                # UI as `#REF!`.
              "endRowIndex": 42, # The end row (exclusive) of the range, or not set if unbounded.
              "endColumnIndex": 42, # The end column (exclusive) of the range, or not set if unbounded.
              "sheetId": 42, # The sheet this range is on.
              "startColumnIndex": 42, # The start column (inclusive) of the range, or not set if unbounded.
              "startRowIndex": 42, # The start row (inclusive) of the range, or not set if unbounded.
            },
            "sortSpecs": [ # The sort order per column. Later specifications are used when values
                # are equal in the earlier specifications.
              { # A sort order associated with a specific column or row.
                "sortOrder": "A String", # The order data should be sorted.
                "dimensionIndex": 42, # The dimension the sort should be applied to.
              },
            ],
            "criteria": { # The criteria for showing/hiding values per column.
                # The map's key is the column index, and the value is the criteria for
                # that column.
              "a_key": { # Criteria for showing/hiding rows in a filter or filter view.
                "hiddenValues": [ # Values that should be hidden.
                  "A String",
                ],
                "condition": { # A condition that can evaluate to true or false. # A condition that must be true for values to be shown.
                    # (This does not override hiddenValues -- if a value is listed there,
                    #  it will still be hidden.)
                    # BooleanConditions are used by conditional formatting,
                    # data validation, and the criteria in filters.
                  "values": [ # The values of the condition. The number of supported values depends
                      # on the condition type.  Some support zero values,
                      # others one or two values,
                      # and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
                    { # The value of the condition.
                      "relativeDate": "A String", # A relative date (based on the current date).
                          # Valid only if the type is
                          # DATE_BEFORE,
                          # DATE_AFTER,
                          # DATE_ON_OR_BEFORE or
                          # DATE_ON_OR_AFTER.
                          #
                          # Relative dates are not supported in data validation.
                          # They are supported only in conditional formatting and
                          # conditional filters.
                      "userEnteredValue": "A String", # A value the condition is based on.
                          # The value is parsed as if the user typed into a cell.
                          # Formulas are supported (and must begin with an `=` or a '+').
                    },
                  ],
                  "type": "A String", # The type of condition.
                },
              },
            },
          },
          "fields": "A String", # The fields that should be updated.  At least one field must be specified.
              # The root `filter` is implied and should not be specified.
              # A single `"*"` can be used as short-hand for listing every field.
        },
        "deleteConditionalFormatRule": { # Deletes a conditional format rule at the given index. # Deletes an existing conditional format rule.
            # All subsequent rules' indexes are decremented.
          "index": 42, # The zero-based index of the rule to be deleted.
          "sheetId": 42, # The sheet the rule is being deleted from.
        },
      },
    ],
  }
